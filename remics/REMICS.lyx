#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\lstset{
basicstyle=\footnotesize\ttfamily
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Introduction 
\end_layout

\begin_layout Subsection
Legacy System Description
\end_layout

\begin_layout Standard
The target legacy system is an ad-hoc personal setup of the Grid-based Projector
-Augmented Wave Method
\begin_inset Foot
status open

\begin_layout Plain Layout
https://wiki.fysik.dtu.dk/gpaw/index.html
\end_layout

\end_inset

 (GPAW) application.
 GPAW is a popular distributed application which provides in conjunction
 with the Atomic Simulation Environment
\begin_inset Foot
status open

\begin_layout Plain Layout
https://wiki.fysik.dtu.dk/ase/
\end_layout

\end_inset

 (ASE) optimization atomic structures.
 The legacy system is the personal deployment of a PhD student at the University
 of Tartu, Institute of Physical Chemistry.
 
\end_layout

\begin_layout Subsubsection
Deployment Architecture 
\end_layout

\begin_layout Standard
The legacy deployment resides on a single host: a Intel® Core™2 Quad CPU
 2.83 GHz with 8 GB RAM.
\end_layout

\begin_layout Subsubsection
Software Artefacts 
\end_layout

\begin_layout Description
GPAW
\end_layout

\begin_deeper
\begin_layout Standard
GPAW provides a Python library for optimizing molecular structures.
 The library contains solvers for optimizing the engery of molecular structures
 and computing atomic forces.
\end_layout

\end_deeper
\begin_layout Description
ASE
\end_layout

\begin_deeper
\begin_layout Standard
The Automic Simulation Environment (ASE) is a Python software library for
 definining, modifying, and visualizing molecular structures.
 GPAW uses ASE as the model upon which its algorithms operate.
\end_layout

\end_deeper
\begin_layout Description
LAPACK
\end_layout

\begin_deeper
\begin_layout Standard
GPAW calculations require great amounts of matrix calculations.
 These are performed using the Linear Algebra PACkage
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.netlib.org/lapack/
\end_layout

\end_inset

 (LAPACK).
\end_layout

\end_deeper
\begin_layout Description
Python
\end_layout

\begin_deeper
\begin_layout Standard
GPAW and ASE are implemented as Python libraries.
 Users create Python scripts to interface these libraries.
 GPAW supports Python versions 2.3 to 2.7.
\end_layout

\end_deeper
\begin_layout Description
MPI
\end_layout

\begin_deeper
\begin_layout Standard
Users may preform distributed GPAW using a library implementing the Message
 Passing Interface (MPI).
 The legacy system uses the Open MPI
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.open-mpi.org/
\end_layout

\end_inset

 implementation.
\end_layout

\end_deeper
\begin_layout Description
Linux
\end_layout

\begin_deeper
\begin_layout Standard
The legacy system runs on the Linux 2.6.35-27 operating system.
 The distribution is Ubuntu 10.10.
\end_layout

\end_deeper
\begin_layout Subsubsection
Disadvantages of the Legacy System 
\end_layout

\begin_layout Standard
The primary disadavantage of the legacy system is that it is limited to
 the resources of a single desktop.
 The memory limits the size of GPAW problems that can be solved.
 GPAW calculations are memory intensive and common problems that the user
 wishes to solve can easilly exhaust the 8GBs available.
 The GPAW application when used in conjunction with MPI can scale to multiple
 hosts, but the user does not have additional resources available.
 
\end_layout

\begin_layout Standard
The resources available also preclude the user from running multiple GPAW
 calculations in parrallel.
 As a normal calculation may run for a day or longer (depending on the CPU
 available), the user must manually batch calculations and wait a considerable
 for results.
\end_layout

\begin_layout Section
Migration Tool Description
\end_layout

\begin_layout Standard
The Desktop-to-Cloud (D2C) tool provides two facilities: transformation
 of user-supplied virtual machine images to the Amazon Machine Image format
 and life-cycle management of OLAP distributed applications hosted on Amazon's
 Elastic Cloud Computing (EC2) platform (or compatible infrastructure, such
 as Eucalyptus).
 Therefore, the base of the desktop-to-cloud process is at least one image
 of a virtual machine being able to run non-interactively an experiment.
 At the moment, the tool is targeted at computational intense scientific
 use cases but is not optimized for management of large datasets.
 
\end_layout

\begin_layout Standard
The general process flow of preparing the legacy system, migrating it to
 a cloud infrastructure, and running the migrated system is depicted in
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Process-overview"

\end_inset

.
 This process, which we have derived from our own experience and the experience
 of users of the D2C prototype is detailed in the following sections.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/overall_prozess.pdf
	lyxscale 50
	width 70col%
	BoundingBox 40bp 310bp 480bp 730bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Process overview
\begin_inset CommandInset label
LatexCommand label
name "fig:Process-overview"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
System Preparation
\end_layout

\begin_layout Standard
From discussions with scientific application users, we have derived Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Process-overview"

\end_inset

 and Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-diagram-preparation"

\end_inset

.
 In this section, we will discuss the preparation part depicted in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-diagram-preparation"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/preparation.pdf
	lyxscale 50
	width 90col%
	BoundingBox 12bp 0bp 560bp 850bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Flow diagram preparation
\begin_inset CommandInset label
LatexCommand label
name "fig:Flow-diagram-preparation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For preparing to migrate a desktop application to the cloud, there are two
 steps involved: 1.
\begin_inset space ~
\end_inset

creating a local virtual environment and 2.
\begin_inset space ~
\end_inset

determining a scaling function which plays a crucial role in approximating
 the costs of executing experiments.
\end_layout

\begin_layout Standard
In step
\begin_inset space ~
\end_inset

1, we have to deal with creating an initial virtual machine, installing
 required software, configuring the virtual machine, testing a relevant
 example in a single virtual machine instance and respective refinements
 if the test fails.
\end_layout

\begin_layout Itemize
Create VM(s)
\end_layout

\begin_deeper
\begin_layout Standard
For creating virtual machines, we have to allocate an appropriate amount
 of host system resources.
 These are a disk image and its maximum host disk space consumption, assigned
 memory, and visible core count.
 In a current case, we assume that we have a desktop computer having 4GB
 of main memory, two cores, and more than 20GB free disk space.
 For a current Linux desktop distribution (like Fedora, Suse, or Ubuntu),
 we need at least 512MB per guest system, for non trivial scientific application
s usually higher numbers in the range of 1 to 4GB will be feasible for initial
 tests.
 To avoid swapping and resulting two long test runs the sum of the memory
 consumed by the virtual machines should not take more than 75% of the host
 system.
 The 4GB host memory demand results out of the fact that we want to be able
 to run at least two virtual machines with 1GB guest memory each.
 
\end_layout

\begin_layout Standard
For the initial operating system, it can be just installed via a downloadable
 ISO cd image, or ready-made vendor specific virtual machine template can
 be used.
 
\end_layout

\begin_layout Standard
This step might have to be repeated or the disks have to be cloned for multiple
 virtual machines, if there are right from the beginning distinctive roles
 with different software setups.
\end_layout

\end_deeper
\begin_layout Itemize
Install software
\end_layout

\begin_deeper
\begin_layout Standard
In this step, we have to install the domain specific software and its dependenci
es.
 If there are multiple roles which require different software, we have to
 account for this for each of these distinct machines here.
\end_layout

\end_deeper
\begin_layout Itemize
Scripting/Debugging single VM(s)
\end_layout

\begin_deeper
\begin_layout Standard
Here, we bring in pre-existing scripted experiments or we develop one from
 scratch.
 The scripts combines input data with configuration aspects, the actual
 executable, and experiment-specific control flow.
\end_layout

\begin_layout Standard
As this is a possible re-entry point of the described flow, this is also
 a point of debugging and refinement of the initially configured scripts
 and parameters.
 If any defects in the execution have been identified, we will try to fix
 these at this point.
 
\end_layout

\end_deeper
\begin_layout Itemize
Test single VM(s) in isolation
\end_layout

\begin_deeper
\begin_layout Standard
In this step each of the virtual machine is executed in isolation, running
 a representative experiment that executes against a problem size manageable
 within the VM resources.
 
\end_layout

\end_deeper
\begin_layout Itemize
If the test was successful (returning an expected outcome in a manageable
 runtime), we proceed to the next step.
 If we had problems either leading to a expectantly late result or no result
 at all, we proceed with the Scripting/Debugging single VM(s) step to address
 this problem.
 In the example, we discovered here first that the default problem size
 was used rather than the expected due to a malformed configuration file.
 This forced us to re-iterate.
\end_layout

\begin_layout Itemize
Assign Roles
\end_layout

\begin_deeper
\begin_layout Standard
At this stage we have one or more VM images with installed software and
 configured that have passed tests in isolation.
 We now describe the distributed system in terms of machine roles, but without
 assigning definite amounts per role.
 This requires creating a role name and mapping it to a single machine image.
 Multiple roles may and often are assigned to a single image.
 A common case is when an image may serve as either a master or slave within
 a deployment.
\begin_inset Foot
status open

\begin_layout Plain Layout
The only distinguishing factor between master and slave is the machine on
 which the experiment script is launched.
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
Scripting/Debugging distributed VM(s)
\end_layout

\begin_deeper
\begin_layout Standard
Running multiple machines of various role types to achieve a coordinated
 requires scripting of execution life-cycle.
 This means support for start-up and shutdown phases as well as health monitorin
g.
 
\end_layout

\begin_layout Standard
In iteration of the step, bugs discovered at the networking layer such as
 incorrect IPs, firewall settings and SSH misconfiguration are corrected.
\end_layout

\end_deeper
\begin_layout Itemize
Clone and Test VM(s) distributed 
\end_layout

\begin_deeper
\begin_layout Standard
Once we have roles and their associated machine images and life-cycle management
 scripts, we must test a minimum deployment.
 A minimum deployment includes at least one instance of each role as a VM,
 all running on a single host machine.
 In the case that more than one role maps to a single image, we must clone
 the image in order run independently.
 
\end_layout

\begin_layout Standard
Once all machines have been launched, we execute the start-up script(s)
 and monitor and wait until job completion or unrecoverable error encountered.
 Once the test has passed, we proceed to scaling measurements.
 If we discover any defects, we return to Scripting/Debugging distributed
 VM(s).
\end_layout

\end_deeper
\begin_layout Standard
The scaling part of the workflow is not further refined as a workflow here
 is not yet finished and under current development.
 We share our experience in the following section.
\end_layout

\begin_layout Subsection
Migrating to the Cloud
\end_layout

\begin_layout Standard
A major hurdle in porting applications to an Infrastructure as a Service
 (Iaas) is re-creation of a software environment on vendor-supplied (maybe
 supported) OS and images.
 The D2C seeks to mitigate potential problems of this often laborious task
 by taking the entire environment as-is, provided it is within a virtual
 environment, and programmatically transforming it to the vendor-specific
 format with as few changes as necessary.
 The tool has two supported IaaS vendors: Amazon's EC2 and Eucalyptus
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.eucalyptus.com/
\end_layout

\end_inset

.
 EC2 is a popular cloud computing platform which is part of the suite of
 cloud services collectively branded as Amazon Web Services (AWS).
 Eucalyptus is an open source platform providing a compatable subset of
 AWS services including EC2.
 
\end_layout

\begin_layout Standard
EC2's underlying machine virtualization is Xen
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.xen.org/
\end_layout

\end_inset

, a widely used open-source technology which supports full and para-virtualizati
on.
 While Amazon provides a range of free and for pay images, it also supports
 user supplied images, provided they function with a kernel using a Xen
 compatible kernelMust have pv-ops with XSAVE hypercall disabled.
 [ward_enabling_????].
 An image may either be configured to boot with Amazon supplied kernels,
 known as AKIs, or boot with a kernel packaged within the image itself.
 The later option, which uses Xen's PVGRUB boot process, is the one which
 D2C uses.
 In the kernel update section of the transformation process, the D2C tool
 installs a new kernel, either 32 or 64 bit depending on the detected image
 type, and modified GRUB configuration to boot with the new kernel by default.
\end_layout

\begin_layout Standard
In addition to working with a compliant kernel, an image must also be able
 to mount devices in the manner supplied by the EC2 virtual machine.
 EC2 instances have a default device mapping that usually does not match
 the fstab entries within the user-supplied image.
 EC2 instances come in a variety of types
\begin_inset Foot
status open

\begin_layout Plain Layout
http://aws.amazon.com/ec2/instance-types/
\end_layout

\end_inset

 that may have more or less storage devices than the image is configured
 for.
 Some instances do not provide swap devices.
 Most instances provide additional storage devices that the user may want
 to utilize.
 To conform with this new virtual hardware environment, the D2C tool changes
 the fstab appropriately.
\end_layout

\begin_layout Standard
In the current implementation, the D2C tool only supports transformation
 of a single disk partition.
 If an image has more than one partition, only the primary can be migrated
 to EC2.
\end_layout

\begin_layout Standard
The first step to application migration requires the user to supply the
 D2C tool with valid AWS credentials (cf.
 Figure [fig:tool-AWS-credentials]).
 The user then registers a desktop image with the tool (cf.
 Figure [fig:tool-added-images]).
 After this, the user may select to initiate the migration process.
 The tool proceeds with the above mentioned image transformations, making
 any changes in a separate image copy, preserving the integrity of the source
 (cf.
 Figure [fig:tool-image-transformation]).
 Upon transformation completion, the tool uploads the image to Amazon's
 Simple Storage Service
\begin_inset Foot
status open

\begin_layout Plain Layout
http://aws.amazon.com/s3/
\end_layout

\end_inset

, one of two hosting solutions for images running on EC2.
 Once uploaded, the tool registers the image with the EC2 system, declaring
 default settings such as suitable system architecture.
 All images are currently registered as private, authorizing read and boot
 access to the account which uploaded and registered it.
 The duration of the entire transformation and upload procedure varies greatly
 depending on the image size and user's Internet connection speed.
 At this point, the user's image is ready to run on the EC2 platform (cf.
 Figure [fig:tool-list-amis] and Figure ).
 This process must be repeated for each Desktop image required for the distribut
ed application.
\end_layout

\begin_layout Subsection
Execution of Deployment 
\end_layout

\begin_layout Standard
The current supported model of applications supported by D2C are non-interactive
 computations which operate on a finite input data set.
 A single execution of an application is defined as a deployment.
 A deployment consists of one or more roles.
 A role is defined by a deployment unique name, association to an EC2 image,
 instance count and type, and life-cycle scripting (cf.
 Figure [fig:tool-deployment-creation]-[fig:tool-deployment-cost]).
 There may be a many to one relationship between roles and an unique EC2
 image.
 The instance count defines the number of virtual machines of specified
 type that will be allocated upon deployment start-up.
 Roles include optional life-cycle scripts that the deployment manager invokes
 at the appropriate stage.
 A deployment's life-cycle proceeds through the following phases:
\end_layout

\begin_layout Description
Reservation 
\end_layout

\begin_deeper
\begin_layout Standard
Upon user initiation, the tool iterates through deployment roles, reserving
 instances matching user specifications.
 If the request cannot be completely fulfilled by EC2, any successful allocation
s are released and the process ends.
 The moment instances are reserved, AWS begins charging the user's account.
 Prior to actual reservation, the tool prompts the user for confirmation,
 displaying the per hour rate in USD as determined by the deployment's instance
 type and count composition.
\end_layout

\end_deeper
\begin_layout Description
Contextualization 
\end_layout

\begin_deeper
\begin_layout Standard
Processes that operate cooperatively require some discovery mechanism.
 Contextualization facilitates this discovery.
 When all instances within a deployment are assigned IP addresses, the tool
 installs a text file containing all addresses on each host in the deployment.
 Currently applications must be configured to work with this D2C specific
 file, but in the future the location and format of this file will be configurab
le by the user.
\end_layout

\end_deeper
\begin_layout Description
Start-up 
\end_layout

\begin_deeper
\begin_layout Standard
Once the machines have been acquired, the tool executes any user-defined
 start actions.
 If a role contains multiple instances, the start actions will be run on
 each instance.
 Currently the tool supplies three classes of start-up actions: synchronous,
 asynchronous, and upload.
 
\end_layout

\begin_layout Standard
The upload action allows the user to install files on the instances which
 were not bundled with the image.
 These files may either correct minor image defects or supply experiment
 specific input.
 
\end_layout

\begin_layout Standard
The synchrounous action executes a specified BASH script.
 The tool executes all scripts for a given role and instance in serial.
 This functionality allows users to make modifications to deployment hosts
 that are guaranteed to finish before starting any main scripts, which are
 run using the asynchronous actions.
\end_layout

\begin_layout Standard
The asynchronous action executes a script remotely on an instance, returning
 execution control immediately back to the tool.
 In contrast to the synchronous action, the user may assume that all asynchronou
s actions run in parallel.
 The action is asynchronous in that it logs on to the remote instance, executes
 the user's script in a daemonizing (nohup) wrapper, and then immediately
 ends the remote connection.
 This is the mechanism by which a user should initiate the main application
 process.
 An example asynchronous action script is:
\end_layout

\begin_layout LyX-Code
mpirun -np 16 python matrix_calc.py
\end_layout

\begin_layout Standard
Once all deployment asynchronous actions have been initiated, the tool changes
 the deployment state to Completion Monitoring.
\end_layout

\end_deeper
\begin_layout Description
Completion
\begin_inset space ~
\end_inset

Monitoring 
\end_layout

\begin_deeper
\begin_layout Standard
The user must configure the D2C tool to test for application specific completion.
 The only option provided currently, is the ability to monitor for the presence
 of a file on an instance.
 The tool continually polls the instances of roles with the specified check.
 If no check is provided for a given role, that role is automatically assumed
 to be in the finished state.
 Only when all roles are in the finished state, does the program proceed
 to finalization.
\end_layout

\end_deeper
\begin_layout Description
Finalization 
\end_layout

\begin_deeper
\begin_layout Standard
The result of supported applications will be some collection of output files.
 These must be migrated to persistent storage as the EC2 instances used
 only provide ephemeral storage, i.e.
 storage that exists for limited lifespan of the instance.
 D2C supports configurable downloading of files from the instances to local
 storage.
 This occurs after the remotely executing application has completed and
 before the instances are terminated.
\end_layout

\end_deeper
\begin_layout Description
Termination 
\end_layout

\begin_deeper
\begin_layout Standard
Upon retrieval of required files, the deployment is shutdown.
 D2C terminates all instances associated with the deployment, ending runtime
 charges.
\end_layout

\end_deeper
\begin_layout Subsection
Domain Model
\end_layout

\begin_layout Standard
A UML diagram which represents domain model of D2C can be seen on 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Domain-Model"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/domain_model.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Domain Model 
\begin_inset CommandInset label
LatexCommand label
name "fig:Domain-Model"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description
Cloud
\end_layout

\begin_deeper
\begin_layout Standard
The cloud represents the platform which will be the deployment will run
 on.
 Cloud can be either Amazon EC2 or Desktop Cloud.
\end_layout

\end_deeper
\begin_layout Description
Deployment
\end_layout

\begin_deeper
\begin_layout Standard
A deployment is run on cloud for a specific computation task with the help
 of roles which define each instance's contribution to the deployment.
\end_layout

\end_deeper
\begin_layout Description
InstanceType
\end_layout

\begin_deeper
\begin_layout Standard
Instance type represents hardware configuration, architecture and cost of
 running environment of an image on cloud environment.
\end_layout

\end_deeper
\begin_layout Description
Architecture
\end_layout

\begin_deeper
\begin_layout Standard
Architecture of an instance defines kernel and ramdisk of the instance.
\end_layout

\end_deeper
\begin_layout Description
Role
\end_layout

\begin_deeper
\begin_layout Standard
Role represents the characteristic of an instance for a given deployment.
 A role has one or more Source Images, Async Actions, Remote Data Collectors,Sta
rt Actions, File Exist Checkers and SSH Credentials.
\end_layout

\end_deeper
\begin_layout Description
SourceImage
\end_layout

\begin_deeper
\begin_layout Standard
Source Image consists of an operating system image which can be derived
 to Desktop Image or AMI(Amazon Machine Image)
\end_layout

\end_deeper
\begin_layout Description
AsyncAction
\end_layout

\begin_deeper
\begin_layout Standard
Asynchronous remote shell commands which run on instances.
\end_layout

\end_deeper
\begin_layout Description
RemoteDataCollector
\end_layout

\begin_deeper
\begin_layout Standard
Remote Data Collector represents the data collectors which enables to collect
 results from instances.
\end_layout

\end_deeper
\begin_layout Description
StartAction
\end_layout

\begin_deeper
\begin_layout Standard
Start Action represents the scripts which are run after the instance is
 deployed on the cloud, which includes the scripts for starting the computations.
 
\end_layout

\end_deeper
\begin_layout Description
SSHCredentials
\end_layout

\begin_deeper
\begin_layout Standard
SSH Credentials are consisting of ID, Username and Private Key and they
 enable logging into running instances of a deployment.
\end_layout

\end_deeper
\begin_layout Subsection
Tool Implementation
\end_layout

\begin_layout Standard
D2C is a GUI desktop application implemented in Python.
 The following section highlights key libraries that faciliate D2C functionality.
\end_layout

\begin_layout Subsubsection
Software Libraries
\end_layout

\begin_layout Description
Python
\end_layout

\begin_deeper
\begin_layout Standard
We choose Python as the primary implementation language for its cross-platform
 support, support of multiple programming paradigms (functional, imperitive,
 and object oriented) and ease of use for creating GUI applications.
 
\end_layout

\end_deeper
\begin_layout Description
WxPython
\end_layout

\begin_deeper
\begin_layout Standard
WxPython provides Python bindings for the wxWidgets GUI framework.
 We choose wxPython based on its ability to create attractive, native-looking
 applications regardless of its runtime desktop (Windows, OSX or various
 Linux flavours).
 Additionally, wxPython / wxWidgets has a large user and support base.
\end_layout

\end_deeper
\begin_layout Description
Boto
\end_layout

\begin_deeper
\begin_layout Standard
AWS provides programatic access to its services via command-line utilities
\begin_inset Foot
status open

\begin_layout Plain Layout
http://docs.amazonwebservices.com/AWSEC2/latest/CommandLineReference/
\end_layout

\end_inset

 and a SOAP XML API
\begin_inset Foot
status open

\begin_layout Plain Layout
http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/
\end_layout

\end_inset

.
 While not supported by Amazon directly, Boto
\begin_inset Foot
status open

\begin_layout Plain Layout
https://github.com/boto/boto
\end_layout

\end_inset

 is the recommended Python wrapper for the AWS SOAP services.
 The D2C tool manages instance lifecycles using the Boto API.
\end_layout

\end_deeper
\begin_layout Description
Libguestfs
\end_layout

\begin_deeper
\begin_layout Standard
Libguestfs
\begin_inset Foot
status open

\begin_layout Plain Layout
http://libguestfs.org/
\end_layout

\end_inset

 provides a veritable Swiss Army Knife of functions to inspect and manipulate
 virtual machine images.
 Using libguestfs is highly preferred to mounting the images within the
 user's filesystem.
 Directly mounting the image is undesirable as it requires the host OS to
 support the image's filesystem(s) and requires root privelges.
 Libguestfs provides access to the image through use of a qemu appliance
 bypassing such onerous requirements.
 Libguestfs' API includes functions to extract partions from images and
 insert SSH key files.
 
\end_layout

\begin_layout Standard
D2C tool interfaces with libguestfs via supported Python bindings
\begin_inset Foot
status open

\begin_layout Plain Layout
http://libguestfs.org/guestfs-python.3.html
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Description
Libvirt
\end_layout

\begin_deeper
\begin_layout Standard
Libvirt
\begin_inset Foot
status open

\begin_layout Plain Layout
http://libvirt.org/
\end_layout

\end_inset

 is an abraction library for interacting with desktop hypervisors.
 The D2C tool uses libvirt to access the currently supported hypervisor,
 VirtualBox.
 In the future, if so desired, adding support for other popular hypervisors
 such as KVM, Xen, and VMWare should be greatly eased by use of libvirt.
\end_layout

\end_deeper
\begin_layout Description
SQLAlchemy
\end_layout

\begin_deeper
\begin_layout Standard
The D2C tool has a rich domain model and requirement of persistance across
 user sessions.
 SQLAlchemy
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.sqlalchemy.org/
\end_layout

\end_inset

 is a Python Object Relational Mapper (ORM) that simplifies SQL-based peristence
 of D2C's classes and relationships.
 As SQLAlchemy absracts the underlying SQL database, the D2C tool could
 make use of MySQL or ther popular SQL databases without significant effort.
\end_layout

\end_deeper
\begin_layout Description
SQLite
\end_layout

\begin_deeper
\begin_layout Standard
SQLite provides persistence management for D2C's highly relational data.
 We choose SQLite for simplicity of installation and use.
 As the D2C tool is designed for single user use, a serverless SQL database
 implementation meets all requirements.
 
\end_layout

\end_deeper
\begin_layout Section
Migration Case Study
\end_layout

\begin_layout Standard
The following GPAW computational experiment computes the minimum-engery
 state of a structure composed of a gold slab and a boron + floride (BF
\begin_inset script subscript

\begin_layout Plain Layout
4
\end_layout

\end_inset

?) molecule.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:22.py"

\end_inset

depicts the main script which creates the automic structure, selects the
 QuasiNewton
\begin_inset Note Note
status open

\begin_layout Plain Layout
Elaborate on what this is?
\end_layout

\end_inset

 optimizer and defines the granularity of the computation.
 By setting the GPAW domain count to the variable 
\begin_inset Formula $world.size$
\end_inset

 the script automatically distributes the computation over the number of
 nodes used by the executing MPI framework.
\end_layout

\begin_layout Standard
The experiment was run both on the University of Tartu's private cloud,
 SciCloud, and Amazon's EC2.
 Over the course of many excutions, we employed a variety of instance types
 and counts.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:SciCloud-Instance-Types"

\end_inset

 and Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:EC2-Instance-Types"

\end_inset

 show the machine attributes of SciCloud and EC2 instance types respectively.
 The instance type make up during each execution was homogenous.
\end_layout

\begin_layout Standard
In an early execution of the script shown in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:22.py"

\end_inset

 on 4 c1.xlarge SciCloud hosts, the total run time was over 18 hours.
 To reduce the overall study time, and to constrain the budget when running
 on EC2, we limited the performance and runtime comparisons of the GPAW
 experiment on various host compositions to the initial setup phase and
 the first iteration of the optimization computation.
 A sample output of these phases taken from the previously mention SciCloud
 execution is shown in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-output-of"

\end_inset

.
 The results from five runs on SciCloud are shown in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:22.py-SciCloud-Results"

\end_inset

 and the results from five runs on EC2 are shown in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:22.py-EC2-Results"

\end_inset

.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:22.py-EC2-Results"

\end_inset

 also includes the costs for running the execution.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout LyX-Code
# Define geometry of slab + BF4: 
\end_layout

\begin_layout LyX-Code
slab = fcc111('Au', size=(2, 2, 3),orthogonal=True) 
\end_layout

\begin_layout LyX-Code
slab.center(axis=2, vacuum=12)
\end_layout

\begin_layout LyX-Code
d=0.8 
\end_layout

\begin_layout LyX-Code
tFB1 = Atoms([Atom('B', (0, 0, 0)), 
\end_layout

\begin_layout LyX-Code
              Atom('F', (d, d, d)), 
\end_layout

\begin_layout LyX-Code
              Atom('F', (-d, -d, d)), 
\end_layout

\begin_layout LyX-Code
              Atom('F', (-d, d, -d)),  
\end_layout

\begin_layout LyX-Code
              Atom('F', (d, -d, -d))]) 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
tFB1.rotate('y',pi/4,center=(0, 0, 0)) 
\end_layout

\begin_layout LyX-Code
tFB1.rotate('x',asin(1/sqrt(3))+pi,center=(0, 0, 0)) 
\end_layout

\begin_layout LyX-Code
tFB1.rotate('z',pi/3,center=(0, 0, 0)) tFB1.translate(slab.positions[5]+(0.,0.,5.118))
 
\end_layout

\begin_layout LyX-Code
slab += tFB1
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# Fix second and third layers: 
\end_layout

\begin_layout LyX-Code
mask = [atom.tag > 1 for atom in slab]  slab.set_constraint(constraints.FixAtoms(ma
sk=mask))
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# Initial state: 
\end_layout

\begin_layout LyX-Code
calc = GPAW(h=0.16, kpts=(4, 4, 1), txt='22.txt',
\end_layout

\begin_layout LyX-Code
            parallel={'domain':world.size}, xc='RPBE') 
\end_layout

\begin_layout LyX-Code
slab.set_calculator(calc)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
qn=optimize.QuasiNewton(slab,trajectory='22.traj',restart='22.pckl') qn.run(fmax=0.05
) qn.attach(calc.write,1,'22.gpw') calc.write('22.gpw')
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
22.py
\begin_inset CommandInset label
LatexCommand label
name "fig:22.py"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU Count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory (MB)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.large
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1024
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4096
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4096
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
SciCloud Instance Types
\begin_inset CommandInset label
LatexCommand label
name "tab:SciCloud-Instance-Types"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Host Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Host Count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NumProc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hours
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5A6C00
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.65
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5XZJT8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.01
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TIZE2L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.large
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.96
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21HHOO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.large
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.09
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
QCW7N1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.large
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.88
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
22.py SciCloud Results
\begin_inset CommandInset label
LatexCommand label
name "tab:22.py-SciCloud-Results"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU Count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU Rating (EC2)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Memory (GB)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cost per Hour (USD)
\begin_inset Foot
status open

\begin_layout Plain Layout
US East region pricing.
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://aws.amazon.com/ec2/pricing/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.large
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.34
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.50
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m2.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.00
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.68
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
EC2 Instance Types
\begin_inset CommandInset label
LatexCommand label
name "tab:EC2-Instance-Types"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
host type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Host Count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NumProc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hours
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cost (USD)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UB0SL3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.large
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.02
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8W3HXA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.92
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0V4XZ7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m2.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IZ0NOW
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.36
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D93363
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c1.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.07
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.36
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
22.py EC2 Results
\begin_inset CommandInset label
LatexCommand label
name "tab:22.py-EC2-Results"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset listings
lstparams "float"
inline false
status open

\begin_layout Plain Layout

  ___ ___ ___ _ _ _  
\end_layout

\begin_layout Plain Layout

 |   |   |_  | | | | 
\end_layout

\begin_layout Plain Layout

 | | | | | .
 | | | | 
\end_layout

\begin_layout Plain Layout

 |__ |  _|___|_____|  0.7.2.6974
\end_layout

\begin_layout Plain Layout

 |___|_|             
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

User: dirac@dirac
\end_layout

\begin_layout Plain Layout

Date: Wed Sep 28 14:37:05 2011
\end_layout

\begin_layout Plain Layout

Arch: x86_64
\end_layout

\begin_layout Plain Layout

Pid:  702
\end_layout

\begin_layout Plain Layout

Dir:  /usr/lib/python2.6/dist-packages/gpaw
\end_layout

\begin_layout Plain Layout

ase:   /usr/lib/python2.6/dist-packages/ase  version:  3.4.1
\end_layout

\begin_layout Plain Layout

numpy: /usr/lib/python2.6/dist-packages/numpy
\end_layout

\begin_layout Plain Layout

units: Angstrom and eV
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Memory estimate
\end_layout

\begin_layout Plain Layout

---------------
\end_layout

\begin_layout Plain Layout

Calculator  839.37 MiB
\end_layout

\begin_layout Plain Layout

    Initial overhead  107.55 MiB
\end_layout

\begin_layout Plain Layout

    Density  56.37 MiB
\end_layout

\begin_layout Plain Layout

        Arrays  10.16 MiB
\end_layout

\begin_layout Plain Layout

        Localized functions  34.05 MiB
\end_layout

\begin_layout Plain Layout

        Mixer  2.32 MiB
\end_layout

\begin_layout Plain Layout

        Interpolator  9.84 MiB
\end_layout

\begin_layout Plain Layout

    Hamiltonian  70.47 MiB
\end_layout

\begin_layout Plain Layout

        Arrays  6.64 MiB
\end_layout

\begin_layout Plain Layout

        Restrictor  6.36 MiB
\end_layout

\begin_layout Plain Layout

        XC 3D grid  28.95 MiB
\end_layout

\begin_layout Plain Layout

        Poisson  25.98 MiB
\end_layout

\begin_layout Plain Layout

        vbar  2.54 MiB
\end_layout

\begin_layout Plain Layout

    Wavefunctions  604.98 MiB
\end_layout

\begin_layout Plain Layout

        Arrays psit_nG  396.00 MiB
\end_layout

\begin_layout Plain Layout

        Eigensolver  102.87 MiB
\end_layout

\begin_layout Plain Layout

        Projectors  5.65 MiB
\end_layout

\begin_layout Plain Layout

        Overlap op  99.25 MiB
\end_layout

\begin_layout Plain Layout

        Kinetic operator  1.22 MiB
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Positions:
\end_layout

\begin_layout Plain Layout

  0 Au    1.4425    0.8328   12.0000
\end_layout

\begin_layout Plain Layout

  1 Au    4.3275    0.8328   12.0000
\end_layout

\begin_layout Plain Layout

  2 Au    0.0000    3.3313   12.0000
\end_layout

\begin_layout Plain Layout

  3 Au    2.8850    3.3313   12.0000
\end_layout

\begin_layout Plain Layout

  4 Au    0.0000    1.6657   14.3556
\end_layout

\begin_layout Plain Layout

  5 Au    2.8850    1.6657   14.3556
\end_layout

\begin_layout Plain Layout

  6 Au    1.4425    4.1641   14.3556
\end_layout

\begin_layout Plain Layout

  7 Au    4.3275    4.1641   14.3556
\end_layout

\begin_layout Plain Layout

  8 Au    0.0000    0.0000   16.7112
\end_layout

\begin_layout Plain Layout

  9 Au    2.8850    0.0000   16.7112
\end_layout

\begin_layout Plain Layout

 10 Au    1.4425    2.4985   16.7112
\end_layout

\begin_layout Plain Layout

 11 Au    4.3275    2.4985   16.7112
\end_layout

\begin_layout Plain Layout

 12 B     2.8850    1.6657   19.4736
\end_layout

\begin_layout Plain Layout

 13 F     4.0164    2.3189   19.0117
\end_layout

\begin_layout Plain Layout

 14 F     1.7536    2.3189   19.0117
\end_layout

\begin_layout Plain Layout

 15 F     2.8850    0.3593   19.0117
\end_layout

\begin_layout Plain Layout

 16 F     2.8850    1.6657   20.8592
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    .-------------.
  
\end_layout

\begin_layout Plain Layout

   /|             |  
\end_layout

\begin_layout Plain Layout

  / |             |  
\end_layout

\begin_layout Plain Layout

 *  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |    F        |  
\end_layout

\begin_layout Plain Layout

 |  |  F B  F     |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |   F         |  
\end_layout

\begin_layout Plain Layout

 |  | Au     Au   |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 Au |  AAu    Au  |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |Au|    Au       |  
\end_layout

\begin_layout Plain Layout

 | Au     Au      |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |Au     Au    |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  |             |  
\end_layout

\begin_layout Plain Layout

 |  .-------------.
 
\end_layout

\begin_layout Plain Layout

 | /             /   
\end_layout

\begin_layout Plain Layout

 |/             /    
\end_layout

\begin_layout Plain Layout

 *-------------*     
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Unit Cell:
\end_layout

\begin_layout Plain Layout

           Periodic     X           Y           Z      Points  Spacing
\end_layout

\begin_layout Plain Layout

  --------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

  1.
 axis:    yes    5.769991    0.000000    0.000000    36     0.1603
\end_layout

\begin_layout Plain Layout

  2.
 axis:    yes    0.000000    4.996959    0.000000    32     0.1562
\end_layout

\begin_layout Plain Layout

  3.
 axis:    no     0.000000    0.000000   28.711178   180     0.1595
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Au-setup:
\end_layout

\begin_layout Plain Layout

  name   : Gold
\end_layout

\begin_layout Plain Layout

  id     : f729301af73151f9133db6f6e28f92a1
\end_layout

\begin_layout Plain Layout

  Z      : 79
\end_layout

\begin_layout Plain Layout

  valence: 11
\end_layout

\begin_layout Plain Layout

  core   : 68
\end_layout

\begin_layout Plain Layout

  charge : 0.0
\end_layout

\begin_layout Plain Layout

  file   : /usr/share/gpaw-setups/Au.RPBE.gz
\end_layout

\begin_layout Plain Layout

  cutoffs: 1.32(comp), 2.33(filt), 2.81(core), lmax=2
\end_layout

\begin_layout Plain Layout

  valence states:
\end_layout

\begin_layout Plain Layout

            energy   radius
\end_layout

\begin_layout Plain Layout

    6s(1)   -5.611   1.323
\end_layout

\begin_layout Plain Layout

    6p(0)   -0.793   1.323
\end_layout

\begin_layout Plain Layout

    5d(10)  -6.824   1.323
\end_layout

\begin_layout Plain Layout

    *s      21.600   1.323
\end_layout

\begin_layout Plain Layout

    *p      26.419   1.323
\end_layout

\begin_layout Plain Layout

    *d      20.388   1.323
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Using partial waves for Au as LCAO basis
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

B-setup:
\end_layout

\begin_layout Plain Layout

  name   : Boron
\end_layout

\begin_layout Plain Layout

  id     : 4c085ebb9e6144015c26e053032a3a9b
\end_layout

\begin_layout Plain Layout

  Z      : 5
\end_layout

\begin_layout Plain Layout

  valence: 3
\end_layout

\begin_layout Plain Layout

  core   : 2
\end_layout

\begin_layout Plain Layout

  charge : 0.0
\end_layout

\begin_layout Plain Layout

  file   : /usr/share/gpaw-setups/B.RPBE.gz
\end_layout

\begin_layout Plain Layout

  cutoffs: 0.64(comp), 1.14(filt), 1.38(core), lmax=2
\end_layout

\begin_layout Plain Layout

  valence states:
\end_layout

\begin_layout Plain Layout

            energy   radius
\end_layout

\begin_layout Plain Layout

    2s(2)   -9.489   0.635
\end_layout

\begin_layout Plain Layout

    2p(1)   -3.587   0.635
\end_layout

\begin_layout Plain Layout

    *s      17.723   0.635
\end_layout

\begin_layout Plain Layout

    *p      23.625   0.635
\end_layout

\begin_layout Plain Layout

    *d       0.000   0.635
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Using partial waves for B as LCAO basis
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

F-setup:
\end_layout

\begin_layout Plain Layout

  name   : Fluorine
\end_layout

\begin_layout Plain Layout

  id     : 96d5c0c6d5d6dd1db009b0a4cc47c564
\end_layout

\begin_layout Plain Layout

  Z      : 9
\end_layout

\begin_layout Plain Layout

  valence: 7
\end_layout

\begin_layout Plain Layout

  core   : 2
\end_layout

\begin_layout Plain Layout

  charge : 0.0
\end_layout

\begin_layout Plain Layout

  file   : /usr/share/gpaw-setups/F.RPBE.gz
\end_layout

\begin_layout Plain Layout

  cutoffs: 0.64(comp), 1.14(filt), 0.74(core), lmax=2
\end_layout

\begin_layout Plain Layout

  valence states:
\end_layout

\begin_layout Plain Layout

            energy   radius
\end_layout

\begin_layout Plain Layout

    2s(2)  -29.979   0.635
\end_layout

\begin_layout Plain Layout

    2p(5)  -11.057   0.635
\end_layout

\begin_layout Plain Layout

    *s      -2.768   0.635
\end_layout

\begin_layout Plain Layout

    *p      16.154   0.635
\end_layout

\begin_layout Plain Layout

    *d       0.000   0.635
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Using partial waves for F as LCAO basis
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Using the RPBE Exchange-Correlation Functional.
\end_layout

\begin_layout Plain Layout

Spin-Paired Calculation
\end_layout

\begin_layout Plain Layout

Total Charge:      0.000000
\end_layout

\begin_layout Plain Layout

Fermi Temperature: 0.100000
\end_layout

\begin_layout Plain Layout

Mode: Finite-difference
\end_layout

\begin_layout Plain Layout

Eigensolver:       rmm-diis
\end_layout

\begin_layout Plain Layout

                   (3 nearest neighbors central finite-difference stencil)
\end_layout

\begin_layout Plain Layout

Poisson Solver:    Jacobi 
\end_layout

\begin_layout Plain Layout

                   (3 nearest neighbors central finite-difference stencil)
\end_layout

\begin_layout Plain Layout

Interpolation:     6th Order
\end_layout

\begin_layout Plain Layout

Reference Energy:  -6210894.257834
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Total number of cores used: 4
\end_layout

\begin_layout Plain Layout

Domain Decomposition: 1 x 1 x 4
\end_layout

\begin_layout Plain Layout

Diagonalizer layout: Serial LAPACK
\end_layout

\begin_layout Plain Layout

Orthonormalizer layout: Serial LAPACK
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Symmetries present: 2
\end_layout

\begin_layout Plain Layout

4 k-points in the Irreducible Part of the Brillouin Zone (total: 16)
\end_layout

\begin_layout Plain Layout

Linear Mixing Parameter:           0.1
\end_layout

\begin_layout Plain Layout

Pulay Mixing with 3 Old Densities
\end_layout

\begin_layout Plain Layout

Damping of Long Wave Oscillations: 50
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Convergence Criteria:
\end_layout

\begin_layout Plain Layout

Total Energy Change per Atom:           0.001 eV / atom
\end_layout

\begin_layout Plain Layout

Integral of Absolute Density Change:    0.0001 electrons
\end_layout

\begin_layout Plain Layout

Integral of Absolute Eigenstate Change: 1e-09
\end_layout

\begin_layout Plain Layout

Number of Bands in Calculation:         128
\end_layout

\begin_layout Plain Layout

Bands to Converge:                      Occupied States Only
\end_layout

\begin_layout Plain Layout

Number of Valence Electrons:            163
\end_layout

\begin_layout Plain Layout

                     log10-error:    Total        Iterations:
\end_layout

\begin_layout Plain Layout

           Time      WFS    Density  Energy       Fermi  Poisson
\end_layout

\begin_layout Plain Layout

iter:   1  14:42:01  +1.3            -50.22805    2      670    
\end_layout

\begin_layout Plain Layout

iter:   2  14:43:46  -1.4            -59.61824    3             
\end_layout

\begin_layout Plain Layout

iter:   3  14:45:30  -1.8            -61.15232    3             
\end_layout

\begin_layout Plain Layout

iter:   4  14:48:24  -2.0   -1.3     -58.27141    11     346    
\end_layout

\begin_layout Plain Layout

iter:   5  14:51:34  -1.4   -1.4     -54.39998    21     427    
\end_layout

\begin_layout Plain Layout

iter:   6  14:53:48  -2.2   -1.7     -55.25702    3      137    
\end_layout

\begin_layout Plain Layout

iter:   7  14:56:00  -2.9   -1.8     -55.20508    3      124    
\end_layout

\begin_layout Plain Layout

iter:   8  14:58:07  -3.3   -1.8     -55.20072    3      101    
\end_layout

\begin_layout Plain Layout

iter:   9  15:00:13  -2.7   -1.9     -55.17475    4      92     
\end_layout

\begin_layout Plain Layout

iter:  10  15:02:12  -3.7   -2.4     -55.20276    3      59     
\end_layout

\begin_layout Plain Layout

iter:  11  15:04:24  -3.7   -2.4     -55.18928    4      125    
\end_layout

\begin_layout Plain Layout

iter:  12  15:06:26  -4.1   -2.7     -55.19065    3      75     
\end_layout

\begin_layout Plain Layout

iter:  13  15:08:23  -4.8   -2.8     -55.18841    3      51     
\end_layout

\begin_layout Plain Layout

iter:  14  15:10:16  -5.1   -2.9     -55.18494    3      24     
\end_layout

\begin_layout Plain Layout

iter:  15  15:12:16  -5.1   -3.0     -55.18554    3      62     
\end_layout

\begin_layout Plain Layout

iter:  16  15:14:05  -5.7   -3.4     -55.18863    2      11     
\end_layout

\begin_layout Plain Layout

iter:  17  15:15:57  -5.8   -3.5     -55.19001    3      20     
\end_layout

\begin_layout Plain Layout

iter:  18  15:17:46  -6.1   -3.7     -55.19025    2      9      
\end_layout

\begin_layout Plain Layout

iter:  19  15:19:36  -6.3   -3.9     -55.19011    2      16     
\end_layout

\begin_layout Plain Layout

iter:  20  15:21:25  -6.8   -4.1     -55.18984    2      3      
\end_layout

\begin_layout Plain Layout

iter:  21  15:23:13  -7.0   -4.2     -55.18875    2      3      
\end_layout

\begin_layout Plain Layout

iter:  22  15:25:01  -7.4   -4.4     -55.18797    2      3      
\end_layout

\begin_layout Plain Layout

iter:  23  15:26:49  -7.8   -4.5     -55.18795    2      2      
\end_layout

\begin_layout Plain Layout

iter:  24  15:28:37  -7.8   -4.6     -55.18880    2      3      
\end_layout

\begin_layout Plain Layout

iter:  25  15:30:25  -8.2   -4.8     -55.18885    2      2      
\end_layout

\begin_layout Plain Layout

iter:  26  15:32:13  -7.6   -4.8     -55.18851    2      4      
\end_layout

\begin_layout Plain Layout

iter:  27  15:34:01  -8.2   -4.7     -55.18890    2      2      
\end_layout

\begin_layout Plain Layout

iter:  28  15:35:49  -8.8   -4.8     -55.18916    2      2      
\end_layout

\begin_layout Plain Layout

iter:  29  15:37:37  -9.2   -4.9     -55.18913    2      1      
\end_layout

\begin_layout Plain Layout

------------------------------------
\end_layout

\begin_layout Plain Layout

Converged After 29 Iterations.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout LyX-Code

\begin_inset Caption

\begin_layout Plain Layout
Example output of initialization phase and one iteration of the optimization
 phase.
\begin_inset CommandInset label
LatexCommand label
name "fig:Example-output-of-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
